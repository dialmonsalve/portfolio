---
import { ClientRouter } from "astro:transitions";

import Header from "../components/layout/Header.astro";
import "@styles/global.css";

function createBreadcrumbs(route: string) {
  const cleanRoute = route.replace(/^\/+/, "");
  const pathName = Astro.url.pathname;

  const path = pathName.startsWith("/en") ? "/en/" : "/";

  const parts = cleanRoute.split("/");
  const breadcrumbs = parts.map((part, index) => {
    const href = `${path}${parts.slice(0, index + 1).join("/")}`;
    return { name: part, href };
  });

  return breadcrumbs.length > 0
    ? [
        { name: "home", href: pathName.startsWith("/en") ? "/en/" : "/" },
        ...breadcrumbs,
      ].filter((route) => route.name !== "")
    : [];
}

const pathName = Astro.url.pathname;

const path = pathName.startsWith("/en")
  ? pathName.replace("/en", "")
  : pathName;

const breadcrumbs = createBreadcrumbs(path);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>dialmonsalve</title>
    <script is:inline>
      const setTheme = () => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        if (theme === "light") {
          document.documentElement.classList.remove("dark");
        } else {
          document.documentElement.classList.add("dark");
        }

        window.localStorage.setItem("theme", theme || "light");
      };

      setTheme();

      document.addEventListener("astro:after-swap", setTheme);
    </script>
    <ClientRouter />
  </head>
  <body>
    <Header />
    <main
      class="pt-22 px-4 lg:pt-18 xl:px-10 pb-5 max-h-screen h-screen overflow-auto bg-gray-200 dark:bg-slate-800"
    >
      {
        breadcrumbs.length > 0 && (
          <ul class="flex gap-1 py-4 lg:py-14 lg:fixed">
            {breadcrumbs.map(({ href, name }) => (
              <li class="flex gap-1 items-center text-[12px]">
                {href !== Astro.url.pathname ? (
                  <a
                    class="block py-0.5 px-2 bg-green-400 rounded-r-xl text-white text-[8px] md:text-sm"
                    href={href}
                  >
                    {name}
                  </a>
                ) : (
                  <span class="block py-0.5 px-2 bg-gray-300 rounded-r-xl text-gray-600  text-[8px] md:text-sm">
                    {name}
                  </span>
                )}
              </li>
            ))}
          </ul>
        )
      }
      <slot />
    </main>
  </body>
</html>
